const TelegramBot = require('node-telegram-bot-api');
const mysql = require('mysql2/promise');
const QRCode = require('qrcode');
const puppeteer = require('puppeteer');
const { setIntervalAsync, clearIntervalAsync } = require('set-interval-async/dynamic');

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'chatbottests'
};
const pool = mysql.createPool(dbConfig);

const TOKEN = '8103981278:AAFmg0wtzeyRODAAOFC-h2ubMxaysOcgTx8';
const bot = new TelegramBot(TOKEN, { polling: true });

// /start
bot.onText(/\/start/, async msg => {
  await bot.sendMessage(
    msg.chat.id,
    `–ü—Ä–∏–≤–µ—Ç, –æ–∫—Ç–∞–≥–æ–Ω!\n\n–Ø –±–æ—Ç —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`
  );
});

// /help
bot.onText(/\/help/, async msg => {
  const helpText =
    `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n` +
    `/site - –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –û–∫—Ç–∞–≥–æ–Ω–∞\n` +
    `/creator - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –±–æ—Ç–∞\n` +
    `/randomItem - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç\n` +
    `/getItemByID [id] - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID\n` +
    `/deleteItem [id] - –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID\n` +
    `/help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥`;
  await bot.sendMessage(msg.chat.id, helpText);
});

// /site
bot.onText(/\/site/, async (msg) => {
  const chatId = msg.chat.id;
  const siteUrl = 'https://octagon-students.ru/';
  await bot.sendMessage(chatId, `–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç:\n${siteUrl}`);
});

// /creator
bot.onText(/\/creator/, async (msg) => {
  const chatId = msg.chat.id;
  const creatorInfo =
    `–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –ì—Ä–æ—à–µ–≤–æ–π –ü–æ–ª–∏–Ω–æ–π –°–µ—Ä–≥–µ–µ–≤–Ω–æ–π üë®‚Äçüíª\n` +
    `GitHub: https://github.com/willazxc228\n` +
    `Telegram: @niceFittts`;
  await bot.sendMessage(chatId, creatorInfo);
});


// /randomItem
bot.onText(/\/randomItem/, async msg => {
  const chatId = msg.chat.id;
  try {
    const conn = await pool.getConnection();
    const [rows] = await conn.query('SELECT * FROM Items ORDER BY RAND() LIMIT 1');
    conn.release();

    if (rows.length > 0) {
      const it = rows[0];
      await bot.sendMessage(chatId, `(${it.id}) ${it.name}: ${it.desc}`);
    } else {
      await bot.sendMessage(chatId, '–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤');
    }
  } catch (err) {
    console.error(err);
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞');
  }
});

// /getItemByID
bot.onText(/\/getItemByID (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const id = match[1];
  try {
    const conn = await pool.getConnection();
    const [rows] = await conn.query('SELECT * FROM Items WHERE id = ?', [id]);
    conn.release();

    if (rows.length > 0) {
      const it = rows[0];
      await bot.sendMessage(chatId, `(${it.id}) ${it.name}: ${it.desc}`);
    } else {
      await bot.sendMessage(chatId, `–ü—Ä–µ–¥–º–µ—Ç —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  } catch (err) {
    console.error(err);
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞');
  }
});

// /deleteItem
bot.onText(/\/deleteItem (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const id = match[1];
  try {
    const conn = await pool.getConnection();
    const [res] = await conn.query('DELETE FROM Items WHERE id = ?', [id]);
    conn.release();

    if (res.affectedRows > 0) {
      await bot.sendMessage(chatId, `–ü—Ä–µ–¥–º–µ—Ç —Å ID ${id} —É–¥–∞–ª—ë–Ω`);
    } else {
      await bot.sendMessage(chatId, `–ü—Ä–µ–¥–º–µ—Ç —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  } catch (err) {
    console.error(err);
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞');
  }
});

// !qr
bot.onText(/!qr (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const text = match[1];
  try {
    const dataUrl = await QRCode.toDataURL(text, { margin: 2 });
    const img = Buffer.from(dataUrl.split(',')[1], 'base64');
    await bot.sendPhoto(chatId, img, {}, { filename: 'qr.png', contentType: 'image/png' });
  } catch (err) {
    console.error(err);
    await bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥');
  }
});

// !webscr
bot.onText(/!webscr (https?:\/\/\S+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const url = match[1];
  await bot.sendMessage(chatId, '–°–Ω–∏–º–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶ ‚è≥');


  let browser;
  try {
    browser = await puppeteer.launch({ args: ['--no-sandbox'] });
    const page = await browser.newPage();
    page.setDefaultNavigationTimeout(20000);
    page.setDefaultTimeout(20000);

    await page.setViewport({ width: 1280, height: 800 });
    await page.goto(url, { waitUntil: 'networkidle2' });
    const buffer = await page.screenshot({ fullPage: true });

    await bot.sendPhoto(chatId, buffer);
  } catch (err) {
    console.error(err);
    const msgText = err.message.includes('navigation') 
      ? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É' 
      : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞';
    await bot.sendMessage(chatId, msgText);
  } finally {
    if (browser) await browser.close();
  }
});

bot.on('message', async msg => {
  if (!msg.from || !msg.from.id) return;

  const userId = msg.from.id;
  const now = new Date();

  try {
    const conn = await pool.getConnection();
    await conn.query(
      `INSERT INTO Users (ID, lastMessage) VALUES (?, ?)
         ON DUPLICATE KEY UPDATE lastMessage = ?`,
      [userId, now, now]
    );
    conn.release();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è lastMessage:', err);
  }
});

async function sendReminders() {
  console.log('sendReminders: –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–ª—á–∞–ª–∏–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  try {
    const conn = await pool.getConnection();
    const [users] = await conn.query(
      `SELECT ID 
         FROM Users 
        WHERE lastMessage < DATE_SUB(NOW(), INTERVAL 2 DAY)`
    );

    for (const u of users) {
      const chatId = u.ID;
      const [items] = await conn.query('SELECT * FROM Items ORDER BY RAND() LIMIT 1');
      if (items.length) {
        const it = items[0];
        await bot.sendMessage(
          chatId,
          `–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –æ—Ç —Ç–µ–±—è –≤–µ—Å—Ç–µ–π. –í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç:\n\n` +
          `(${it.id}) ${it.name}: ${it.desc}`
        );
      }
    }

    conn.release();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ sendReminders:', err);
  }
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∑–∞–ø—É—Å–∫–∞–µ—Ç sendReminders –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 13:00 (–ú–°–ö)
function scheduleDailyAt(hour, minute, fn) {
  const now = new Date();
  const next = new Date(now);
  next.setHours(hour, minute, 0, 0);
  if (next <= now) next.setDate(next.getDate() + 1);

  const delay = next.getTime() - now.getTime();
  setTimeout(() => {
    fn();
    setIntervalAsync(fn, 24 * 60 * 60 * 1000);
  }, delay);
}

// –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduleDailyAt(13, 0, sendReminders);

bot.on('polling_error', e => console.error('Polling error', e));
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...');
