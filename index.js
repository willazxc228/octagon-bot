const TelegramBot = require('node-telegram-bot-api');
const mysql = require('mysql2/promise');
const QRCode = require('qrcode');
const puppeteer = require('puppeteer');

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'chatbottests'
};

const pool = mysql.createPool(dbConfig);

const TOKEN = '8103981278:AAFmg0wtzeyRODAAOFC-h2ubMxaysOcgTx8';
const bot = new TelegramBot(TOKEN, {polling: true});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const welcomeText = `–ü—Ä–∏–≤–µ—Ç, –æ–∫—Ç–∞–≥–æ–Ω!\n\n` +
                     `–Ø –±–æ—Ç —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.\n` +
                     `–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`;
  
  await bot.sendMessage(chatId, welcomeText);
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  const helpText = `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n` +
                   `/site - –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –û–∫—Ç–∞–≥–æ–Ω–∞\n` +
                   `/creator - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –±–æ—Ç–∞\n` +
                   `/randomItem - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç\n` +
                   `/getItemByID [id] - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID\n` +
                   `/deleteItem [id] - –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID\n` +
                   `/help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥`;
  
  await bot.sendMessage(chatId, helpText);
});

// –ö–æ–º–∞–Ω–¥–∞ /randomItem
bot.onText(/\/randomItem/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    const connection = await pool.getConnection();
    const [rows] = await connection.query('SELECT * FROM Items ORDER BY RAND() LIMIT 1');
    connection.release();

    if (rows.length > 0) {
      const item = rows[0];
      await bot.sendMessage(chatId, `(${item.id}) - ${item.name}: ${item.desc}`);
    } else {
      await bot.sendMessage(chatId, '–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤');
    }
  } catch (error) {
    console.error(error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /getItemByID
bot.onText(/\/getItemByID (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const itemId = match[1];

  try {
    const connection = await pool.getConnection();
    const [rows] = await connection.query('SELECT * FROM Items WHERE id = ?', [itemId]);
    connection.release();

    if (rows.length > 0) {
      const item = rows[0];
      await bot.sendMessage(chatId, `(${item.id}) - ${item.name}: ${item.desc}`);
    } else {
      await bot.sendMessage(chatId, `–ü—Ä–µ–¥–º–µ—Ç —Å ID ${itemId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  } catch (error) {
    console.error(error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /deleteItem
bot.onText(/\/deleteItem (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const itemId = match[1];

  try {
    const connection = await pool.getConnection();
    const [result] = await connection.query('DELETE FROM Items WHERE id = ?', [itemId]);
    connection.release();

    if (result.affectedRows > 0) {
      await bot.sendMessage(chatId, `–ü—Ä–µ–¥–º–µ—Ç —Å ID ${itemId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
    } else {
      await bot.sendMessage(chatId, `–ü—Ä–µ–¥–º–µ—Ç —Å ID ${itemId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  } catch (error) {
    console.error(error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ !qr
bot.onText(/!qr (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const text = match[1];

  try {
    const dataUrl = await QRCode.toDataURL(text, { margin: 2 });

    const base64Data = dataUrl.replace(/^data:image\/png;base64,/, '');
    const imgBuffer = Buffer.from(base64Data, 'base64');

    await bot.sendPhoto(chatId, imgBuffer, {}, { filename: 'qr.png', contentType: 'image/png' });
  } catch (err) {
    console.error('QR error', err);
    await bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ !webscr
bot.onText(/!webscr (https?:\/\/\S+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const url = match[1];

  await bot.sendMessage(chatId, '–°–Ω–∏–º–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶ ‚è≥');

  let browser;
  try {
    browser = await puppeteer.launch({ args: ['--no-sandbox'] });
    const page = await browser.newPage();

    const NAVIGATION_TIMEOUT = 20_000;             
    const TOTAL_TIMEOUT      = 20_000;             

    page.setDefaultNavigationTimeout(NAVIGATION_TIMEOUT);
    page.setDefaultTimeout(NAVIGATION_TIMEOUT);

    const makeScreenshot = async () => {
      await page.setViewport({ width: 1280, height: 800 });
      await page.goto(url, { waitUntil: 'networkidle2' });
      return page.screenshot({ fullPage: true });
    };

    const buffer = await Promise.race([
      makeScreenshot(),
      new Promise((_, reject) =>
        setTimeout(() => reject(new Error('Screenshot timeout')), TOTAL_TIMEOUT)
      )
    ]);

    await bot.sendPhoto(chatId, buffer);
  } catch (err) {
    console.error('Webscr error', err);
    const text = err.message === 'Screenshot timeout'
      ? '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞'
      : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞';
    await bot.sendMessage(chatId, text);
  } finally {
    if (browser) await browser.close();
  }
});


bot.on('polling_error', (error) => {
  console.error(`–û—à–∏–±–∫–∞: ${error.code} - ${error.message}`);
});

console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...');